#+TITLE: Network services portal of the University of Pinar del Río
#+AUTHOR: Luis Ángel Méndez Gort
#+EMAIL: gort.andres000@gmail.com
#+LATEX_CLASS: article
#+OPTIONS: toc:nil

* Introduction

At University of Pinar del Río (UPR), the Directorate of
Computerization (DC) is the department in charge of all aspects of the
computer networks. They maintain and expand the hardware and software
infrastructure. Currently all services are used by registered users.

This program comes from the following necessities of UPR's DC:

- Register the MAC and IP addresses used to access the users accounts,
  and use that information for reporting the account access to users
  and administrators.

- Place consumption of the different quotas, like the email storage
  quota and the internet download quota, in a single site.

- Automate the delivery of contracts for using the network services,
  using the network itself.

- Notify the users, thus avoiding the impersonation of administrators
  which is common with the current email notifications, and also the
  duplication of messages in mailboxes.

- Document the implemented services.

But in general perspective, all these services are instances of an
interface for receiving messages and content regarding certain
subjects, which are the services implemented at UPR's network.

* Design

_REMARK_ Along this document a language with syntax resembling Haskell
is used as specification language. _END OF REMARK_

The core of the program consist in an interface for accessing
and publishing information related to services implemented at
UPR's network. Since all services need authentication, the 
program provides authentication for all managed services.

There are two types of services, the messaging services and
the notification services. Messaging services permit establishing
conversations, and the notification services permit receiving
small messages (notifications).

This interface represents the user's point of view,
also ~b0 = b . Just~.

#+BEGIN_SRC
interface Portal where
  isAdmin :: Bool
  logIn :: a (Maybe Credentials) -> b (Maybe [Service])
  selServ :: b0 [Service] -> SId -> c Service
  publish :: b1 isAdmin -> Service -> b [Service]
  logOut :: b0 _ -> a Nothing
  public :: a Nothing
#+END_SRC

The ~Bool~ value in the ~f~ context is equivalent to "It is a
bidirectional conversation service, instead an unidirectional one".
The f context must reference the service.

The ~Bool~ value in the ~g~ context is equivalent to "There are unread
messages".

#+BEGIN_SRC
interface Service where
  isBid :: Bool
  isAdmin :: Bool
  show :: f [Conversation] Bool
  delete :: f (isAdmin \/ isBid) -> CId -> d Bool
  update :: f (isAdmin \/ isBid) -> CId -> Text -> f Conversation
  create :: f (isAdmin \/ isBid) -> Conversation -> e Bool
  news :: g Bool
#+END_SRC

* Implementation

The success in solving problems seems to depend on
abstraction an interactivity, i.e. agile symbolic
manipulation of these abstractions. Therefore this
chapter on implementation, in Haskell.

#+NAME: logIn
#+BEGIN_SRC haskell
class AccountDB where
  logIn ∷ Monad m ⇒ Credentials → m [Service]
 
#+END_SRC

** Modules

#+BEGIN_SRC haskell :noweb yes :tangle src/App.hs
module App where

<<logIn>>
#+END_SRC

* Web application

The Portal and Service interfaces are implemented as a REST API in
Laravel.

The API consists in the following rules:

- ~/~ -> public
- ~/login~ -> logIn
- ~/
